#+title: towards a formal spec for bex

* truth tables:
TT(n) means a mapping of [0..2^n-1 |-> {0,1}]
O = λ.0  (the mapping that always returns 0)
I = λ.1
TT(0) ∈ {O,I}
TT(n) where n>0 is an ordered pair of two TT(n-1)
- corresponds to choice between two TT(n-1) based on Var(n-1)
- or simply an ordered pair of two things that map to TT(n-1)

* operations on truth tables
The boolean operations on TTs are simple and well defined.

The problem is they're huge.

Therefore we tend to use boolean expressions or formulas instead.

In general, it can take a long time to decide whether two expressions are the same.
- Not hard at all. Just very slow!
- In particular we care: does it == O? (SAT)
- Explain how this relates to P vs NP.

Card(TT(n)) = 2^(2^n), so you need 2^n bits to distinguish between them.
Since that's how many bits are in the truth table, they're self-enumerating.

* coding schemes
Usually we only care about a few of the possible truth tables, so we can create a coding scheme.

The dyadic/triadic operations (if/then/else) can be decomposed and reassembled later.

Now we can decompose operations on TT(n) into two operations on code names.

This coding scheme allows us to efficiently memoize the sub-transactions.

* distributed work
Thee next step is to distribute the work across multiple workers.

* current solution in bex (bddswarm)

Currently, the main thread stores its cache in two dictionaries:

 - =stable= contains all "collected wisdom" from previous runs, is shared (immutably) by other threads.
 - =recent= contains only new information collected since =stable= was last updated.

The main function at the moment is ~run_swarm~.
It re-initializes the swarm.
It clears out the channels, copies =recent= to =stable=, and



* in the future:
The problem is:
 - each worker is going to generate new names for things in its 'recent' dictionary,
 - *AND* we want names to /uniquely/ identify truth tables
 - So we need some way for the workers to "compare notes"

The goal, then, is to have workers periodically merge their states.
