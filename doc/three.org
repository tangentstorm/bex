* bdd for "is divisible by 2" is just one node

* bdd for "is divisible by 3" is trickier

You are looking at window of 4 numbers, and asking whether they're divisible by 3.
It's a simple repeating pattern:

:   (; 0 = 3 | ])s $ i.*/s=.10 4
: ┌───────────┬───────┐
: │ 0  1  2  3│1 0 0 1│
: │ 4  5  6  7│0 0 1 0│
: │ 8  9 10 11│0 1 0 0│
: │12 13 14 15│1 0 0 1│
: │16 17 18 19│0 0 1 0│
: │20 21 22 23│0 1 0 0│
: │24 25 26 27│1 0 0 1│
: │28 29 30 31│0 0 1 0│
: │32 33 34 35│0 1 0 0│
: │36 37 38 39│1 0 0 1│
: └───────────┴───────┘

It would be nice if there were some way to say "this pattern repeats".

Unfortunately, even though it repeats, there will never be a case where one bit branches between two copies of the same pattern.

But what does it look like?

#+begin_src j
   (; 0 = 3 | ]) s $ i.*/s=.8 4
┌───────────┬───────┐
│ 0  1  2  3│1 0 0 1│
│ 4  5  6  7│0 0 1 0│
│ 8  9 10 11│0 1 0 0│
│12 13 14 15│1 0 0 1│
│16 17 18 19│0 0 1 0│
│20 21 22 23│0 1 0 0│
│24 25 26 27│1 0 0 1│
│28 29 30 31│0 0 1 0│
└───────────┴───────┘
#+end_src

So here's the part that repeats:

: 1 0 0 1 | 0 0 1 0 | 0 1 0 0

And here's how the whole truth table looks for 5 input bits (32=8*4 possible input combinations)

: 0 1 2 3 | 4 5 6 7   8 9 10 11 12131415 16171819  20212223  24252627  28293031
: 1 0 0 1 | 0 0 1 0 | 0 1 0 0 | 1 0 0 1 | 0 0 1 0 | 0 1 0 0 | 1 0 0 1 | 0 0 1 0

so let's define the twigs:

: o: 0
: i: 1
: 1: oi
: 2: io

and rewrite:

: i o o i | o o i o | o i o o | i o o i | o o i o | o i o o | i o o i | o o i o
:   2 1   |   o 2   |   1 o   |   2 1   |   o 2   |   1 o   |   2 1   |   o 2

give names to the repeating things:

: 3: 2 1
: 4: o 2
: 5: 1 o

and now it's clear we have:

: 2 1 o 2  | 1 o 2 1  |  o 2  1 o   |  2 1  o 2
:   3 4    |   5 3    |    4  5     |    3  4


So... It looks like it's actually pretty easy to generate and extend this sequence.

At each level above the final leaves at the bottom, we have three types of node, and we just rotate between them to construct the next level up:

: (o 1 2)
: (3 4 5)

Now we need new nodes:

: 6: 3 4
: 7: 5 3
: 8: 4 5

and then the pattern seems to repeat:

:  9: 6 7
: 10: 8 6
: 11: 7 8

: 12:  9 10
: 13: 11  9
: 14: 10 11

So it seems like when we add a new layer to the bdd, we only wind up adding a few nodes. (three repeating pattern nodes, and then three nodes at the top to choose between the four patterns)



* what about divisible by 5 and 7?

Let's look at these truth tables:

:    (; (0 = 5 | ]); (0 = 7 | ])) s $ i.*/s=.8 8
: ┌───────────────────────┬───────────────┬───────────────┐
: │ 0  1  2  3  4  5  6  7│1 0 0 0 0 1 0 0│1 0 0 0 0 0 0 1│
: │ 8  9 10 11 12 13 14 15│0 0 1 0 0 0 0 1│0 0 0 0 0 0 1 0│
: │16 17 18 19 20 21 22 23│0 0 0 0 1 0 0 0│0 0 0 0 0 1 0 0│
: │24 25 26 27 28 29 30 31│0 1 0 0 0 0 1 0│0 0 0 0 1 0 0 0│
: │32 33 34 35 36 37 38 39│0 0 0 1 0 0 0 0│0 0 0 1 0 0 0 0│
: │40 41 42 43 44 45 46 47│1 0 0 0 0 1 0 0│0 0 1 0 0 0 0 0│
: │48 49 50 51 52 53 54 55│0 0 1 0 0 0 0 1│0 1 0 0 0 0 0 0│
: │56 57 58 59 60 61 62 63│0 0 0 0 1 0 0 0│1 0 0 0 0 0 0 1│
: └───────────────────────┴───────────────┴───────────────┘

We need to expand our scope to 8 outputs at a time for our view to be wide enough to see the whole repeating pattern. Since we're talking about compressing binary treees, we're always going to be looking at windows whose lengths are some powers of two, and cyclic patterns with periods smaller than that window.

** multiples of 5

So for multiples of 5, let's look at the pattern. (we'll reuse the nodes from earlier):

The repeating pattern is really this:

: i o o o o , i o o o o , i o o o o , i o o o o , ...

But we chop it like this:

: | i o o o : o i o o | o o i o : o o o i | o o o o ...

which becomes:

:     2 o   |   1 o   |   o 2   |   o 1   |   o o  ... (and then it repeats)

** multiples of 7

