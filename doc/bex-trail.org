#+title: bex trail (a short history of the development)

* the 'base' concept
:PROPERTIES:
:TS:       <2019-09-10 10:09AM>
:ID:       pwkcqhy0ngi0
:END:

In bex, =Base= is short for "database." In particular, a database representing bits.

The intent is that at some point, =Base= will be a trait with multiple conforming implementations.

A base represents a set of boolean functions over a set of input bits, called variables.

The functions are represented as directed graphs of nodes, but the interpretation of the graph differs between the implementations.

Intermediate nodes (any function of the input varibles) are always referenced by numeric identifiers called a NIDs. =NID= is short for "node ID".

Variables are referred to by a numeric identifiers called VIDs. =VID= is short for "variable id". Although conceptually variables are just leaf nodes in our graphs, we use a separate type for them, both because they have separate distinguishing features than other nodes, and also because these nodes are so simple that they don't actually need to be stored anywhere -- the VID itself contains everything you need to know about them.

We do make a distinction between "real" (input) variables, and "virtual" (intermediate) variables. Virtual variables are just placeholders that represent arbitrary sub-expressions in the graph. (For example, while working with a function ~f(g(x0))~, we might set ~v0=g(x0)~, and simply say ~f(v0)~. In that case, ~v0~ is a virtual variable, while ~x0~ is a "real" variable.

Since each variable is also a node, each =VID= has a corresponding encoding as a =NID=, and each =Base= provides a method called =var(x:VID)->NID= to provide the mapping.

Each base also has two special nodes named =O= and =I=, which represent the constant functions =0= ("always false") and =1= ("always true"), respectively. The =Base= methods =o()= and =i()= return these nodes.

=Base= provides a core set of functions for constructing, retrieving and combining nodes. In general, some attempt is made to normalize these constructions, so that (/ideally/) functions with the same truth table have the same NID. However, this is an NP-complete problem, so each implementation provides a different set of tradeoffs here. For example, as we'll soon see, the "AST" implementation provides extremely fast constructions, but can only normalize very simple equalities, such as (P∧Q = Q∧P). The BDD implementation, on the other hand, guarantees a canonical representation for each boolean function (up to permutation of the input variables), but often takes quite a bit longer to construct the nodes.


* =x32= and the =!xint_type= macro
:PROPERTIES:
:TS:       <2019-09-10 10:09AM>
:ID:       cj51xgy0ngi0
:END:

Bex also has the ability to create arrays of NIDs tied to a particular base that look and behave like rust's native integer types.

If the members of these arrays are set to =O= and =I=, then they behave just like really slow bits in an int register.

But: if they're set to arbitrary NIDs, then they can be used to build complex expressions.




* TODO note on permutations

#+begin_src j

   NB. what happens to the truth table of ($0 xor $1 and ($2 xor $3)
   NB. for each permutation of the input variables.
   _ * ,/(0&{ ~: 1&{ *. 2&{ ~: 3&{)"_1 (i.24) A. ,:"1 |: #: i.16

0 0 0 0 0 _ _ 0 _ _ _ _ _ 0 0 _
0 0 0 0 0 _ _ 0 _ _ _ _ _ 0 0 _
0 0 0 _ 0 0 _ 0 _ _ _ 0 _ _ 0 _
0 0 0 _ 0 0 _ 0 _ _ _ 0 _ _ 0 _
0 0 0 _ 0 _ 0 0 _ _ _ 0 _ 0 _ _
0 0 0 _ 0 _ 0 0 _ _ _ 0 _ 0 _ _
0 0 0 0 _ _ _ _ 0 _ _ 0 _ 0 0 _
0 0 0 0 _ _ _ _ 0 _ _ 0 _ 0 0 _
0 0 0 _ _ _ _ 0 0 0 _ 0 _ _ 0 _
0 0 0 _ _ _ _ 0 0 0 _ 0 _ _ 0 _
0 0 0 _ _ _ _ 0 0 _ 0 0 _ 0 _ _
0 0 0 _ _ _ _ 0 0 _ 0 0 _ 0 _ _
0 0 _ _ 0 0 _ _ 0 _ _ 0 _ 0 0 _
0 0 _ _ 0 0 _ _ 0 _ _ 0 _ 0 0 _
0 0 _ _ 0 _ _ 0 0 0 _ _ _ 0 0 _
0 0 _ _ 0 _ _ 0 0 0 _ _ _ 0 0 _
0 0 _ _ 0 _ _ 0 0 _ _ 0 0 0 _ _
0 0 _ _ 0 _ _ 0 0 _ _ 0 0 0 _ _
0 _ 0 _ 0 _ 0 _ 0 _ _ 0 _ 0 0 _
0 _ 0 _ 0 _ 0 _ 0 _ _ 0 _ 0 0 _
0 _ 0 _ 0 _ _ 0 0 _ 0 _ _ 0 0 _
0 _ 0 _ 0 _ _ 0 0 _ 0 _ _ 0 0 _
0 _ 0 _ 0 _ _ 0 0 _ _ 0 0 _ 0 _
0 _ 0 _ 0 _ _ 0 0 _ _ 0 0 _ 0 _

#+end_src
