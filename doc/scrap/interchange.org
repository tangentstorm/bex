
You ought to be able to convert between different representations of a function.

For example, you might want to convert an AST or ANF to a BDD,
so it's easy to iterate through the solutions. (This already works for AST, and now I want it for ANF).

The basic idea is to walk the source structure, yielding nodes in whatever logical structure it uses natively (individual operations for an AST, AB+C for ANF, ITE for BDD, etc), and then let the target encode it whatever way makes the most sense.

Also, we want to preserve the ability to work in either direction (translating concrete source nodes to their exact representation in the destination, or skipping to the end and working backwards, hoping that tighter constraints at the end of the process allow many of the source nodes to be ignored.

Okay, so at the very least, I want a =to_base= function in the =Base= trait, that copies a particular function over to a destination =Base= and returns the new node.


