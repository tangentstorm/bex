#+title: bex example: primes

* bdd-like structure for "lowest factor"

Here's how the twigs (the branches just above the bottom) look for the first 256 odd integers:

:    8 16 $ _2 < \ (({.@q: :: ])"0 + _ * 1&p:) s=. >: +:i.n=.256
: ┌────┬────┬───┬────┬────┬────┬────┬────┬────┬───┬────┬────┬───┬────┬────┬────┐
: │0 _ │_ _ │3 _│_ 3 │_ _ │3 _ │5 3 │_ _ │3 5 │_ 3│_ _ │3 _ │7 3│_ 5 │3 _ │_ 3 │
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │5 _ │3 _ │_ 3│7 _ │3 _ │5 3 │_ 7 │3 5 │_ 3 │_ _│3 _ │_ 3 │_ 5│3 7 │11 3│5 _ │
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │3 _ │7 3 │_ _│3 11│5 3 │_ _ │3 5 │_ 3 │7 _ │3 _│13 3│_ 5 │3 _│_ 3 │5 11│3 _ │
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │_ 3 │_ _ │3 7│5 3 │11 _│3 5 │7 3 │13 _│3 _ │_ 3│_ 5 │3 _ │_ 3│5 13│3 _ │11 3│
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │_ 7 │3 _ │5 3│_ _ │3 5 │_ 3 │_ _ │3 7 │17 3│_ 5│3 13│7 3 │5 _│3 _ │_ 3 │_ 11│
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │3 17│5 3 │7 _│3 5 │_ 3 │11 7│3 _ │_ 3 │_ 5 │3 _│19 3│5 _ │3 7│_ 3 │13 _│3 _ │
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │5 3 │_ 17│3 5│_ 3 │_ 13│3 11│_ 3 │7 5 │3 _ │_ 3│5 7 │3 _ │_ 3│19 _│3 _ │5 3 │
: ├────┼────┼───┼────┼────┼────┼────┼────┼────┼───┼────┼────┼───┼────┼────┼────┤
: │_ 11│3 5 │_ 3│_ _ │3 _ │7 3 │11 5│3 _ │13 3│5 _│3 _ │17 3│7 _│3 _ │5 3 │_ 7 │
: └────┴────┴───┴────┴────┴────┴────┴────┴────┴───┴────┴────┴───┴────┴────┴────┘


an underscore_ indicates the number is a prime to the first power.
the zero in the upper left is just an artifact of how (q: 1) works in j
(it returns an empty list)

of course there are 128 such pairs, but only 31 unique ones:

:    # ~. , 8 16 $ _2 < \ (({.@q: :: ])"0 + _ * 1&p:) s=. >: +:i.n=.256
: 31

if we allow sorting the pairs, that gets us down to 19 unique twigs.

:    # ~. , /:~ each  8 16 $ _2 < \ (({.@q: :: ])"0 + _ * 1&p:) s=. >: +:i.n=.256
: 19

I get an out of memory error if i try to build the list for 2^32 but for 2^16 it's only 832 unique nodes:

:    # ~. , /:~ each   _2 < \ (({.@q: :: ])"0 + _ * 1&p:) s=. >: +:i.n=.2^16
: 832

pumping it up to 2^24 takes a couple minutes to run:

:        # ~. , /:~ each   _2 < \ (({.@q: :: ])"0 + _ * 1&p:) s=. >: +:i.n=.2^24
: 56153


* branching factors
A binary tree corresponds to a binary representation of the number. if we looked at base 10, we'd need 10 branches for each node.

I think if you wanted to incorporate this into a routine to factor big numbers, you'd probably want to start with base 2 to filter out multiples of two (the idea is just to find the lowest factor and then divide by that, recursively).

It seems like you could start by looking at a really big anti-prime "P", and then taking the result modulo that number. This gives you the "last digit" in base P, and from that you can just look at it to filter out most of the small factors.

So for example, 10 isn't an "anti prime" (2 * 3 * 5 = 30 would be) but it gives the idea: you konw immediately if a number is divisible by 10, 5, or 2 just by looking at the last digit.  (if last digit is in {0,2,4,6,8}, it's divisible by 2, and if the last digit is in {0,5} it's divisible by 5. (obviously, 0 indicates it's divisible by both 2 and 5). So then you only have to really consider numbers ending with {1,3,7,9}.

Well, so what? I guess my thought is that if you did the same thing with anti-prime P, you'd know any time the last digit was some multiple of the factors of P what the smallest factor was.

It seems like these would cover a lot of ground...

:    */p:i.5
: 2310

So you could just have a lookup table that does all this.

