#+title: Refactoring: Introducing a Type (to untyped code)

Changing a widely-used type in an established codebase can be daunting, simply because so many lines need to change. I've had this problem a couple times in my rust project, and this is a recipe I've come up with to help.

The project in question is called [bex](https://github.com/tangentstorm/bex), a crate for working with giant boolean expressions in various forms, such as Binary Decision Diagrams, abstract syntax trees, or algebraic normal form. These are all basically graph structures, and all share the same interface through a trait called Base.

Previously, Base was a generic trait with two member types: one for node identifiers (NIDs), and one for variable identifiers (VIDs - as in input variables to the boolean expressions: var(0) XOR var(3), etc.)... But recently I decided to have all the structures share the same scheme for NIDs and VIDs.

So... Previously these IDs were both simple integers with magic bitmasks. Now NID is a simple struct, and VID is (becoming) an enum.

Figuring out how to thread these changes 
